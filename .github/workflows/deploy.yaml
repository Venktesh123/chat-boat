name: Deploy CHATBOT to EC2
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create env file
        env:
          ENV: ${{ secrets.ENV }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY_4 }}
          GOOGLE_API_KEY_1: ${{ secrets.GOOGLE_API_KEY_1 }}
          GOOGLE_API_KEY_2: ${{ secrets.GOOGLE_API_KEY_2 }}
          GOOGLE_API_KEY_3: ${{ secrets.GOOGLE_API_KEY_3 }}
        run: |
          cat <<EOF > env
          ENV=${ENV}
          EC2_USERNAME=${EC2_USERNAME}
          GOOGLE_API_KEY=${GOOGLE_API_KEY}
          GOOGLE_API_KEY_1=${GOOGLE_API_KEY_1}
          GOOGLE_API_KEY_2=${GOOGLE_API_KEY_2}
          GOOGLE_API_KEY_3=${GOOGLE_API_KEY_3}
          EOF

      - name: Configure SSH
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat <<EOF > ~/.ssh/config
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config

      - name: Create deployment script
        run: |
          mkdir -p scripts
          cat > scripts/deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "=== Starting deployment process ==="
          currentuser=$(whoami)

          sudo mkdir -p /var/www/CHATBOT
          sudo chown "${currentuser}:${currentuser}" /var/www/CHATBOT

          echo "Files to be deployed:"
          ls -la
          sudo cp -r * /var/www/CHATBOT/
          sudo chown -R "${currentuser}:${currentuser}" /var/www/CHATBOT

          cd /var/www/CHATBOT/
          python3 -m venv venv
          . ./venv/bin/activate
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install flask fastapi uvicorn gunicorn python-dotenv

          if [ -f requirements.txt ]; then
              python3 -m pip install -r requirements.txt
          fi

          sudo bash -c 'cat > /etc/nginx/sites-available/chatbot << "EOF_NGINX"
          server {
              listen 80;
              server_name _;
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              location /flask/ {
                  proxy_pass http://127.0.0.1:4000/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOF_NGINX'

          sudo ln -sf /etc/nginx/sites-available/chatbot /etc/nginx/sites-enabled
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t
          sudo systemctl restart nginx

          sudo bash -c "cat > /etc/systemd/system/chatbot-fastapi.service << EOF
          [Unit]
          Description=CHATBOT FastAPI Service
          After=network.target

          [Service]
          User=${currentuser}
          Group=${currentuser}
          WorkingDirectory=/var/www/CHATBOT
          ExecStart=/var/www/CHATBOT/venv/bin/gunicorn --workers 3 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 app:api --timeout 120
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF"

          sudo bash -c "cat > /etc/systemd/system/chatbot-flask.service << EOF
          [Unit]
          Description=CHATBOT Flask API Service
          After=network.target

          [Service]
          User=${currentuser}
          Group=${currentuser}
          WorkingDirectory=/var/www/CHATBOT
          ExecStart=/var/www/CHATBOT/venv/bin/gunicorn --workers 2 --bind 0.0.0.0:4000 api:app --timeout 120
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF"

          sudo systemctl daemon-reload
          sudo systemctl enable chatbot-fastapi.service chatbot-flask.service
          sudo systemctl start chatbot-fastapi.service chatbot-flask.service

          echo "=== Deployment complete ==="
          sudo systemctl status chatbot-fastapi.service --no-pager
          sudo systemctl status chatbot-flask.service --no-pager
          EOF
          chmod +x scripts/deploy.sh

      - name: Package code
        run: tar --warning=no-file-changed -czf deploy.tar.gz --exclude='.git' --exclude='.github' .

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          if timeout 10 bash -c "</dev/tcp/$EC2_HOST/22"; then
            scp -o ConnectTimeout=10 deploy.tar.gz $EC2_USERNAME@$EC2_HOST:~/
            ssh -o ConnectTimeout=30 $EC2_USERNAME@$EC2_HOST "
              mkdir -p ~/deployment && 
              tar -xzf deploy.tar.gz -C ~/deployment &&
              cd ~/deployment &&
              chmod +x ./scripts/deploy.sh &&
              ./scripts/deploy.sh &&
              cd ~ &&
              rm -rf deploy.tar.gz deployment"
            echo "Deployment completed successfully"
          else
            echo "Could not connect to EC2 instance at $EC2_HOST"
            exit 1
          fi
