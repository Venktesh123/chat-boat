name: Deploy CHATBAOT to EC2 🚀

on:
  push:
    branches:
      - "main" # Trigger on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch ✅
        uses: actions/checkout@v3

      - name: Debug - List files in repository
        run: ls -la

      - name: Set up SSH key and whitelist EC2 IP address 🐻‍❄️
        run: |
          mkdir -p ~/.ssh
          echo "${{secrets.EC2_SSH_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{secrets.EC2_HOST}} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no ${{secrets.EC2_USERNAME}}@${{secrets.EC2_HOST}} "echo SSH connection successful"

      - name: Create .env file dynamically 🧨
        run: |
          cat > env <<EOF
          ENV=${{secrets.ENV}}
          EC2_USERNAME=${{secrets.EC2_USERNAME}}
          GOOGLE_API_KEY=${{secrets.GOOGLE_API_KEY}}
          EOF

      - name: Create deploy.sh script 🚀
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e  # Exit immediately if a command exits with a non-zero status

          echo "=== Starting deployment process ==="

          # Create destination directory with proper permissions
          echo "Setting up app directory"
          sudo mkdir -p /var/www/CHATBAOT
          sudo chown $(whoami):$(whoami) /var/www/CHATBAOT

          # Show files that will be deployed
          echo "Files to be deployed:"
          ls -la

          # Remove old app contents while preserving logs
          if [ -f /var/www/CHATBAOT/gunicorn.log ]; then
              echo "Preserving existing logs"
              sudo cp /var/www/CHATBAOT/gunicorn.log /tmp/gunicorn.log.backup
          fi

          echo "Removing old app contents"
          sudo rm -rf /var/www/CHATBAOT/*

          echo "Moving files to app folder"
          sudo cp -r * /var/www/CHATBAOT/
          sudo chown -R $(whoami):$(whoami) /var/www/CHATBAOT

          # Restore logs if they existed
          if [ -f /tmp/gunicorn.log.backup ]; then
              sudo mv /tmp/gunicorn.log.backup /var/www/CHATBAOT/gunicorn.log
          fi

          cd /var/www/CHATBAOT/

          # Ensure .env file exists
          if [ -f env ]; then
              sudo mv env .env
              echo ".env file created from env"
          else
              echo "WARNING: env file not found, creating empty .env"
              touch .env
          fi

          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip python3-dev nginx

          if [ -f requirements.txt ]; then
              sudo pip3 install -r requirements.txt
          else
              echo "WARNING: requirements.txt not found, installing essential packages"
              sudo pip3 install streamlit fastapi uvicorn pydantic langchain langchain_google_genai langchain_community faiss-cpu python-dotenv gunicorn
          fi

          # Configure and restart Nginx
          sudo tee /etc/nginx/sites-available/chatbaot > /dev/null << 'NGINX_CONFIG'
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          NGINX_CONFIG

          sudo ln -sf /etc/nginx/sites-available/chatbaot /etc/nginx/sites-enabled
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo nginx -t
          sudo systemctl restart nginx

          # Start the application
          sudo pkill gunicorn || true
          nohup sudo gunicorn --workers 3 --bind 0.0.0.0:8000 app:api --timeout 120 > gunicorn.log 2>&1 &

          echo "=== Deployment complete ==="
          echo "Check logs at: /var/www/CHATBAOT/gunicorn.log"
          EOF

      - name: Create requirements.txt if not exists
        run: |
          if [ ! -f requirements.txt ]; then
            echo "streamlit==1.32.0" > requirements.txt
            echo "fastapi==0.109.2" >> requirements.txt
            echo "uvicorn==0.27.1" >> requirements.txt
            echo "pydantic==2.5.2" >> requirements.txt
            echo "langchain==0.1.4" >> requirements.txt
            echo "langchain_google_genai==0.0.6" >> requirements.txt
            echo "langchain_community==0.0.13" >> requirements.txt
            echo "faiss-cpu==1.7.4" >> requirements.txt
            echo "python-dotenv==1.0.0" >> requirements.txt
            echo "gunicorn==21.2.0" >> requirements.txt
          fi

      - name: Copy files to remote server 🚙
        run: |
          echo "Copying files to remote server"
          scp -r app.py transcription.py requirements.txt env deploy.sh ${{secrets.EC2_USERNAME}}@${{secrets.EC2_HOST}}:~/

      - name: Run Bash Script To Deploy App 🚀
        run: |
          ssh -o StrictHostKeyChecking=no ${{secrets.EC2_USERNAME}}@${{secrets.EC2_HOST}} "chmod +x ./deploy.sh && ./deploy.sh"

      - name: Clean up SSH key 🚀
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
