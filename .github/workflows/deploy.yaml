name: Deploy CHATBAOT to EC2 🚀

on:
  push:
    branches:
      - "main" # Trigger on push to the main branch
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch ✅
        uses: actions/checkout@v3

      - name: Debug - List files in repository
        run: ls -la

      - name: Set up SSH key and whitelist EC2 IP address 🐻‍❄️
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{secrets.EC2_SSH_KEY}}

      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{secrets.EC2_HOST}} >> ~/.ssh/known_hosts
          echo "Testing SSH connection"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{secrets.EC2_USERNAME}}@${{secrets.EC2_HOST}} "echo SSH connection successful"

      - name: Create .env file dynamically 🧨
        run: |
          echo "ENV=${{secrets.ENV}}" > env
          echo "EC2_USERNAME=${{secrets.EC2_USERNAME}}" >> env
          echo "GOOGLE_API_KEY=${{secrets.GOOGLE_API_KEY}}" >> env

      - name: Create sample transcript files if they don't exist
        run: |
          if [ ! -f cleaned_transcript.txt ]; then
            echo "Creating cleaned transcript file..."
            echo "Welcome to today's lecture on Artificial Intelligence and Machine Learning." > cleaned_transcript.txt
            echo "This is a sample transcript file created during deployment." >> cleaned_transcript.txt
            echo "AI systems can analyze data, learn patterns, and make decisions." >> cleaned_transcript.txt
            echo "Machine learning is a subset of AI focused on building systems that learn from data." >> cleaned_transcript.txt
            echo "Deep learning uses neural networks with multiple layers." >> cleaned_transcript.txt
            echo "Natural language processing allows computers to understand human language." >> cleaned_transcript.txt
            echo "Computer vision enables machines to interpret and make decisions based on visual data." >> cleaned_transcript.txt
            echo "Reinforcement learning involves training agents to make sequences of decisions." >> cleaned_transcript.txt
            echo "Ethics in AI is important to ensure responsible development and deployment." >> cleaned_transcript.txt
            echo "Bias in AI systems can lead to unfair outcomes and must be addressed." >> cleaned_transcript.txt
            echo "The future of AI includes advancements in autonomous systems and general intelligence." >> cleaned_transcript.txt
          fi

          if [ ! -f combined_transcript.txt ]; then
            echo "Creating combined transcript file..."
            echo "Welcome to today's lecture on Artificial Intelligence and Machine Learning." > combined_transcript.txt
            echo "This is a sample combined transcript file created during deployment." >> combined_transcript.txt
            echo "AI systems can analyze data, learn patterns, and make decisions." >> combined_transcript.txt
            echo "Machine learning is a subset of AI focused on building systems that learn from data." >> combined_transcript.txt
            echo "Deep learning uses neural networks with multiple layers." >> combined_transcript.txt
            echo "Natural language processing allows computers to understand human language." >> combined_transcript.txt
            echo "Computer vision enables machines to interpret and make decisions based on visual data." >> combined_transcript.txt
            echo "Reinforcement learning involves training agents to make sequences of decisions." >> combined_transcript.txt
          fi

      - name: Create requirements.txt if not exists
        run: |
          if [ ! -f requirements.txt ]; then
            echo "streamlit==1.32.0" > requirements.txt
            echo "fastapi==0.109.2" >> requirements.txt
            echo "uvicorn==0.27.1" >> requirements.txt
            echo "pydantic==2.5.2" >> requirements.txt
            echo "langchain==0.1.0" >> requirements.txt
            echo "langchain_community==0.0.14" >> requirements.txt
            echo "langchain_google_genai==0.0.6" >> requirements.txt
            echo "python-dotenv==1.0.0" >> requirements.txt
            echo "gunicorn==21.2.0" >> requirements.txt
          fi

      - name: Create deploy.sh script
        run: |
          echo '#!/bin/bash' > deploy.sh
          echo 'set -e  # Exit immediately if a command exits with a non-zero status' >> deploy.sh
          echo '' >> deploy.sh
          echo 'echo "=== Starting deployment process ==="' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Create destination directory with proper permissions' >> deploy.sh
          echo 'echo "Setting up app directory"' >> deploy.sh
          echo 'sudo mkdir -p /var/www/CHATBAOT' >> deploy.sh
          echo 'sudo chown "$(whoami):$(whoami)" /var/www/CHATBAOT' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Show files that will be deployed' >> deploy.sh
          echo 'echo "Files to be deployed:"' >> deploy.sh
          echo 'ls -la' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Remove old app contents while preserving logs' >> deploy.sh
          echo 'if [ -f /var/www/CHATBAOT/gunicorn.log ]; then' >> deploy.sh
          echo '    echo "Preserving existing logs"' >> deploy.sh
          echo '    sudo cp /var/www/CHATBAOT/gunicorn.log /tmp/gunicorn.log.backup' >> deploy.sh
          echo 'fi' >> deploy.sh
          echo '' >> deploy.sh
          echo 'echo "Removing old app contents"' >> deploy.sh
          echo 'sudo rm -rf /var/www/CHATBAOT/*' >> deploy.sh
          echo '' >> deploy.sh
          echo 'echo "Moving files to app folder"' >> deploy.sh
          echo 'sudo cp -r * /var/www/CHATBAOT/' >> deploy.sh
          echo 'sudo chown -R "$(whoami):$(whoami)" /var/www/CHATBAOT' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Restore logs if they existed' >> deploy.sh
          echo 'if [ -f /tmp/gunicorn.log.backup ]; then' >> deploy.sh
          echo '    sudo mv /tmp/gunicorn.log.backup /var/www/CHATBAOT/gunicorn.log' >> deploy.sh
          echo 'fi' >> deploy.sh
          echo '' >> deploy.sh
          echo 'cd /var/www/CHATBAOT/' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Ensure .env file exists' >> deploy.sh
          echo 'if [ -f env ]; then' >> deploy.sh
          echo '    sudo mv env .env' >> deploy.sh
          echo '    echo ".env file created from env"' >> deploy.sh
          echo 'else' >> deploy.sh
          echo '    echo "WARNING: env file not found, creating empty .env"' >> deploy.sh
          echo '    touch .env' >> deploy.sh
          echo 'fi' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Verify transcript files exist' >> deploy.sh
          echo 'if [ ! -f cleaned_transcript.txt ]; then' >> deploy.sh
          echo '    echo "WARNING: cleaned_transcript.txt not found, creating sample file"' >> deploy.sh
          echo '    echo "Welcome to today'\''s lecture on Artificial Intelligence and Machine Learning." > cleaned_transcript.txt' >> deploy.sh
          echo '    echo "This is a sample transcript file created during deployment." >> cleaned_transcript.txt' >> deploy.sh
          echo '    echo "AI systems can analyze data, learn patterns, and make decisions." >> cleaned_transcript.txt' >> deploy.sh
          echo '    echo "Machine learning is a subset of AI focused on building systems that learn from data." >> cleaned_transcript.txt' >> deploy.sh
          echo '    echo "Deep learning uses neural networks with multiple layers." >> cleaned_transcript.txt' >> deploy.sh
          echo '    echo "Natural language processing allows computers to understand human language." >> cleaned_transcript.txt' >> deploy.sh
          echo '    echo "Sample transcript file created"' >> deploy.sh
          echo 'fi' >> deploy.sh
          echo '' >> deploy.sh
          echo 'if [ ! -f combined_transcript.txt ]; then' >> deploy.sh
          echo '    echo "WARNING: combined_transcript.txt not found, creating sample file"' >> deploy.sh
          echo '    echo "Welcome to today'\''s lecture on Artificial Intelligence and Machine Learning." > combined_transcript.txt' >> deploy.sh
          echo '    echo "This is a sample combined transcript file created during deployment." >> combined_transcript.txt' >> deploy.sh
          echo '    echo "AI systems can analyze data, learn patterns, and make decisions." >> combined_transcript.txt' >> deploy.sh
          echo '    echo "Sample combined transcript file created"' >> deploy.sh
          echo 'fi' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Install system dependencies and Python packages' >> deploy.sh
          echo 'echo "Installing system dependencies and Python packages"' >> deploy.sh
          echo 'sudo apt-get update' >> deploy.sh
          echo 'sudo apt-get install -y python3 python3-pip python3-dev python3-venv python3-pillow python3-numpy python3-scipy nginx' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Create and activate Python virtual environment' >> deploy.sh
          echo 'echo "Creating Python virtual environment"' >> deploy.sh
          echo 'python3 -m venv venv' >> deploy.sh
          echo '. ./venv/bin/activate' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Verify we'\''re in the virtual environment' >> deploy.sh
          echo 'echo "Python interpreter being used:"' >> deploy.sh
          echo 'which python3' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Install Python packages in virtual environment' >> deploy.sh
          echo 'echo "Installing Python packages in virtual environment"' >> deploy.sh
          echo 'python3 -m pip install --upgrade pip setuptools wheel' >> deploy.sh
          echo 'python3 -m pip install uvicorn[standard]' >> deploy.sh
          echo 'python3 -m pip install fastapi==0.109.2 streamlit==1.32.0 pydantic==2.5.2' >> deploy.sh
          echo 'python3 -m pip install langchain==0.1.0 langchain_community==0.0.14 langchain_google_genai==0.0.6' >> deploy.sh
          echo 'python3 -m pip install python-dotenv==1.0.0 gunicorn==21.2.0 scikit-learn' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Configure and restart Nginx' >> deploy.sh
          echo 'echo "Configuring Nginx"' >> deploy.sh
          echo 'sudo tee /etc/nginx/sites-available/chatbaot > /dev/null << NGINX_EOF' >> deploy.sh
          echo 'server {' >> deploy.sh
          echo '    listen 80;' >> deploy.sh
          echo '    server_name _;' >> deploy.sh
          echo '    ' >> deploy.sh
          echo '    location / {' >> deploy.sh
          echo '        proxy_pass http://127.0.0.1:8000;' >> deploy.sh
          echo '        proxy_set_header Host \$host;' >> deploy.sh
          echo '        proxy_set_header X-Real-IP \$remote_addr;' >> deploy.sh
          echo '        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;' >> deploy.sh
          echo '        proxy_set_header X-Forwarded-Proto \$scheme;' >> deploy.sh
          echo '    }' >> deploy.sh
          echo '}' >> deploy.sh
          echo 'NGINX_EOF' >> deploy.sh
          echo '' >> deploy.sh
          echo 'sudo ln -sf /etc/nginx/sites-available/chatbaot /etc/nginx/sites-enabled' >> deploy.sh
          echo 'sudo rm -f /etc/nginx/sites-enabled/default' >> deploy.sh
          echo 'sudo nginx -t' >> deploy.sh
          echo 'sudo systemctl restart nginx' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Create a systemd service file for the application' >> deploy.sh
          echo 'echo "Creating systemd service for CHATBAOT"' >> deploy.sh
          echo 'sudo tee /etc/systemd/system/chatbaot.service > /dev/null << SERVICE_EOF' >> deploy.sh
          echo '[Unit]' >> deploy.sh
          echo 'Description=CHATBAOT Gunicorn Service' >> deploy.sh
          echo 'After=network.target' >> deploy.sh
          echo '' >> deploy.sh
          echo '[Service]' >> deploy.sh
          echo 'User=$(whoami)' >> deploy.sh
          echo 'Group=$(whoami)' >> deploy.sh
          echo 'WorkingDirectory=/var/www/CHATBAOT' >> deploy.sh
          echo 'Environment="PATH=/var/www/CHATBAOT/venv/bin:/usr/bin"' >> deploy.sh
          echo 'Environment="PYTHONPATH=/var/www/CHATBAOT:/usr/lib/python3/dist-packages"' >> deploy.sh
          echo 'ExecStart=/var/www/CHATBAOT/venv/bin/gunicorn --workers 3 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 app:api --timeout 120' >> deploy.sh
          echo 'Restart=always' >> deploy.sh
          echo '' >> deploy.sh
          echo '[Install]' >> deploy.sh
          echo 'WantedBy=multi-user.target' >> deploy.sh
          echo 'SERVICE_EOF' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Start the application' >> deploy.sh
          echo 'echo "Starting the application as a service"' >> deploy.sh
          echo 'sudo systemctl daemon-reload' >> deploy.sh
          echo 'sudo systemctl stop chatbaot.service || true' >> deploy.sh
          echo 'sudo systemctl enable chatbaot.service' >> deploy.sh
          echo 'sudo systemctl start chatbaot.service' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Wait for the service to start' >> deploy.sh
          echo 'echo "Waiting for the service to start..."' >> deploy.sh
          echo 'sleep 10' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Verify the app is running' >> deploy.sh
          echo 'echo "Verifying application is running"' >> deploy.sh
          echo 'curl -s http://127.0.0.1:8000/ || echo "WARNING: Application is not responding on port 8000"' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Check service status' >> deploy.sh
          echo 'sudo systemctl status chatbaot.service --no-pager' >> deploy.sh
          echo '' >> deploy.sh
          echo 'echo "=== Deployment complete ==="' >> deploy.sh
          echo 'echo "Check logs with: sudo journalctl -u chatbaot.service"' >> deploy.sh
          chmod +x deploy.sh

      - name: Copy files to remote server 🚙
        run: |
          echo "Copying files to remote server"
          scp -r app.py transcription.py requirements.txt env deploy.sh cleaned_transcript.txt combined_transcript.txt ${{secrets.EC2_USERNAME}}@${{secrets.EC2_HOST}}:~/

      - name: Run Bash Script To Deploy App 🚀
        run: |
          ssh -o StrictHostKeyChecking=no ${{secrets.EC2_USERNAME}}@${{secrets.EC2_HOST}} "chmod +x ./deploy.sh && ./deploy.sh"
