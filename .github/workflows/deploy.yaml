name: Python AI Chatbot CI/CD
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # Only lint the api.py file, ignore app.py with Streamlit references
          flake8 api.py --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 api.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Create .env file for Google API keys
        run: |
          echo "# Google API Keys for Gemini" > .env
          echo "GOOGLE_API_KEY_1=${{ secrets.GOOGLE_API_KEY_1 }}" >> .env
          echo "GOOGLE_API_KEY_2=${{ secrets.GOOGLE_API_KEY_2 }}" >> .env
          echo "GOOGLE_API_KEY_3=${{ secrets.GOOGLE_API_KEY_3 }}" >> .env
          echo "GOOGLE_API_KEY_4=${{ secrets.GOOGLE_API_KEY_4 }}" >> .env
      - name: Create requirements.txt with Flask-CORS
        run: |
          # Ensure requirements.txt has flask-cors
          if ! grep -q "flask-cors" requirements.txt; then
            echo "flask-cors>=3.0.0" >> requirements.txt
          fi
      - name: Copy files to EC2
        run: |
          # Create remote directory if not exists
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p ~/chatbot"

          # Backup existing files on EC2 before replacing
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "if [ -d ~/chatbot ]; then cd ~/chatbot && mkdir -p backup && cp -r *.py *.txt *.sh .env backup/ 2>/dev/null || true; fi"

          # Copy all Python files
          scp *.py ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/chatbot/

          # Copy deployment script
          scp deploy.sh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/chatbot/

          # Copy environment file
          scp .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/chatbot/

          # Copy text files
          scp *.txt ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/chatbot/

          # Make deploy script executable
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "chmod +x ~/chatbot/deploy.sh"

      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cd ~/chatbot && sudo ./deploy.sh"
